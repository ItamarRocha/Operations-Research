// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fboolean_5fproblem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto;
namespace operations_research {
namespace sat {
class BooleanAssignment;
class BooleanAssignmentDefaultTypeInternal;
extern BooleanAssignmentDefaultTypeInternal _BooleanAssignment_default_instance_;
class LinearBooleanConstraint;
class LinearBooleanConstraintDefaultTypeInternal;
extern LinearBooleanConstraintDefaultTypeInternal _LinearBooleanConstraint_default_instance_;
class LinearBooleanProblem;
class LinearBooleanProblemDefaultTypeInternal;
extern LinearBooleanProblemDefaultTypeInternal _LinearBooleanProblem_default_instance_;
class LinearObjective;
class LinearObjectiveDefaultTypeInternal;
extern LinearObjectiveDefaultTypeInternal _LinearObjective_default_instance_;
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> ::operations_research::sat::BooleanAssignment* Arena::CreateMaybeMessage<::operations_research::sat::BooleanAssignment>(Arena*);
template<> ::operations_research::sat::LinearBooleanConstraint* Arena::CreateMaybeMessage<::operations_research::sat::LinearBooleanConstraint>(Arena*);
template<> ::operations_research::sat::LinearBooleanProblem* Arena::CreateMaybeMessage<::operations_research::sat::LinearBooleanProblem>(Arena*);
template<> ::operations_research::sat::LinearObjective* Arena::CreateMaybeMessage<::operations_research::sat::LinearObjective>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations_research {
namespace sat {

// ===================================================================

class LinearBooleanConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearBooleanConstraint) */ {
 public:
  inline LinearBooleanConstraint() : LinearBooleanConstraint(nullptr) {};
  virtual ~LinearBooleanConstraint();

  LinearBooleanConstraint(const LinearBooleanConstraint& from);
  LinearBooleanConstraint(LinearBooleanConstraint&& from) noexcept
    : LinearBooleanConstraint() {
    *this = ::std::move(from);
  }

  inline LinearBooleanConstraint& operator=(const LinearBooleanConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearBooleanConstraint& operator=(LinearBooleanConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearBooleanConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearBooleanConstraint* internal_default_instance() {
    return reinterpret_cast<const LinearBooleanConstraint*>(
               &_LinearBooleanConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinearBooleanConstraint& a, LinearBooleanConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearBooleanConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearBooleanConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearBooleanConstraint* New() const final {
    return CreateMaybeMessage<LinearBooleanConstraint>(nullptr);
  }

  LinearBooleanConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearBooleanConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearBooleanConstraint& from);
  void MergeFrom(const LinearBooleanConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearBooleanConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.sat.LinearBooleanConstraint";
  }
  protected:
  explicit LinearBooleanConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto);
    return ::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
    kCoefficientsFieldNumber = 2,
    kNameFieldNumber = 5,
    kLowerBoundFieldNumber = 3,
    kUpperBoundFieldNumber = 4,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;
  public:
  void clear_literals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_literals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_literals() const;
  void _internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_literals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 literals(int index) const;
  void set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      literals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_literals();

  // repeated int64 coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_coefficients() const;
  void _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_coefficients();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 coefficients(int index) const;
  void set_coefficients(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_coefficients();

  // optional string name = 5 [default = ""];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 lower_bound = 3;
  bool has_lower_bound() const;
  private:
  bool _internal_has_lower_bound() const;
  public:
  void clear_lower_bound();
  ::PROTOBUF_NAMESPACE_ID::int64 lower_bound() const;
  void set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lower_bound() const;
  void _internal_set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 upper_bound = 4;
  bool has_upper_bound() const;
  private:
  bool _internal_has_upper_bound() const;
  public:
  void clear_upper_bound();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_bound() const;
  void set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_bound() const;
  void _internal_set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearBooleanConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > literals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > coefficients_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 lower_bound_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_bound_;
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class LinearObjective PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearObjective) */ {
 public:
  inline LinearObjective() : LinearObjective(nullptr) {};
  virtual ~LinearObjective();

  LinearObjective(const LinearObjective& from);
  LinearObjective(LinearObjective&& from) noexcept
    : LinearObjective() {
    *this = ::std::move(from);
  }

  inline LinearObjective& operator=(const LinearObjective& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearObjective& operator=(LinearObjective&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearObjective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearObjective* internal_default_instance() {
    return reinterpret_cast<const LinearObjective*>(
               &_LinearObjective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinearObjective& a, LinearObjective& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearObjective* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearObjective* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearObjective* New() const final {
    return CreateMaybeMessage<LinearObjective>(nullptr);
  }

  LinearObjective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearObjective>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearObjective& from);
  void MergeFrom(const LinearObjective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearObjective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.sat.LinearObjective";
  }
  protected:
  explicit LinearObjective(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto);
    return ::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
    kCoefficientsFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kScalingFactorFieldNumber = 4,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;
  public:
  void clear_literals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_literals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_literals() const;
  void _internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_literals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 literals(int index) const;
  void set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      literals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_literals();

  // repeated int64 coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_coefficients() const;
  void _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_coefficients();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 coefficients(int index) const;
  void set_coefficients(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_coefficients();

  // optional double offset = 3 [default = 0];
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  double offset() const;
  void set_offset(double value);
  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);
  public:

  // optional double scaling_factor = 4 [default = 1];
  bool has_scaling_factor() const;
  private:
  bool _internal_has_scaling_factor() const;
  public:
  void clear_scaling_factor();
  double scaling_factor() const;
  void set_scaling_factor(double value);
  private:
  double _internal_scaling_factor() const;
  void _internal_set_scaling_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearObjective)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > literals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > coefficients_;
  double offset_;
  double scaling_factor_;
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class BooleanAssignment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.BooleanAssignment) */ {
 public:
  inline BooleanAssignment() : BooleanAssignment(nullptr) {};
  virtual ~BooleanAssignment();

  BooleanAssignment(const BooleanAssignment& from);
  BooleanAssignment(BooleanAssignment&& from) noexcept
    : BooleanAssignment() {
    *this = ::std::move(from);
  }

  inline BooleanAssignment& operator=(const BooleanAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanAssignment& operator=(BooleanAssignment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BooleanAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BooleanAssignment* internal_default_instance() {
    return reinterpret_cast<const BooleanAssignment*>(
               &_BooleanAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BooleanAssignment& a, BooleanAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanAssignment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BooleanAssignment* New() const final {
    return CreateMaybeMessage<BooleanAssignment>(nullptr);
  }

  BooleanAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BooleanAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BooleanAssignment& from);
  void MergeFrom(const BooleanAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BooleanAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.sat.BooleanAssignment";
  }
  protected:
  explicit BooleanAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto);
    return ::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;
  public:
  void clear_literals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_literals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_literals() const;
  void _internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_literals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 literals(int index) const;
  void set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_literals(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      literals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_literals();

  // @@protoc_insertion_point(class_scope:operations_research.sat.BooleanAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > literals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};
// -------------------------------------------------------------------

class LinearBooleanProblem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearBooleanProblem) */ {
 public:
  inline LinearBooleanProblem() : LinearBooleanProblem(nullptr) {};
  virtual ~LinearBooleanProblem();

  LinearBooleanProblem(const LinearBooleanProblem& from);
  LinearBooleanProblem(LinearBooleanProblem&& from) noexcept
    : LinearBooleanProblem() {
    *this = ::std::move(from);
  }

  inline LinearBooleanProblem& operator=(const LinearBooleanProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearBooleanProblem& operator=(LinearBooleanProblem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearBooleanProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearBooleanProblem* internal_default_instance() {
    return reinterpret_cast<const LinearBooleanProblem*>(
               &_LinearBooleanProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LinearBooleanProblem& a, LinearBooleanProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearBooleanProblem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearBooleanProblem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearBooleanProblem* New() const final {
    return CreateMaybeMessage<LinearBooleanProblem>(nullptr);
  }

  LinearBooleanProblem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearBooleanProblem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearBooleanProblem& from);
  void MergeFrom(const LinearBooleanProblem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearBooleanProblem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations_research.sat.LinearBooleanProblem";
  }
  protected:
  explicit LinearBooleanProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto);
    return ::descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 4,
    kVarNamesFieldNumber = 6,
    kNameFieldNumber = 1,
    kObjectiveFieldNumber = 5,
    kAssignmentFieldNumber = 7,
    kNumVariablesFieldNumber = 3,
    kOriginalNumVariablesFieldNumber = 8,
  };
  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::operations_research::sat::LinearBooleanConstraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >*
      mutable_constraints();
  private:
  const ::operations_research::sat::LinearBooleanConstraint& _internal_constraints(int index) const;
  ::operations_research::sat::LinearBooleanConstraint* _internal_add_constraints();
  public:
  const ::operations_research::sat::LinearBooleanConstraint& constraints(int index) const;
  ::operations_research::sat::LinearBooleanConstraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >&
      constraints() const;

  // repeated string var_names = 6;
  int var_names_size() const;
  private:
  int _internal_var_names_size() const;
  public:
  void clear_var_names();
  const std::string& var_names(int index) const;
  std::string* mutable_var_names(int index);
  void set_var_names(int index, const std::string& value);
  void set_var_names(int index, std::string&& value);
  void set_var_names(int index, const char* value);
  void set_var_names(int index, const char* value, size_t size);
  std::string* add_var_names();
  void add_var_names(const std::string& value);
  void add_var_names(std::string&& value);
  void add_var_names(const char* value);
  void add_var_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_names();
  private:
  const std::string& _internal_var_names(int index) const;
  std::string* _internal_add_var_names();
  public:

  // optional string name = 1 [default = ""];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .operations_research.sat.LinearObjective objective = 5;
  bool has_objective() const;
  private:
  bool _internal_has_objective() const;
  public:
  void clear_objective();
  const ::operations_research::sat::LinearObjective& objective() const;
  ::operations_research::sat::LinearObjective* release_objective();
  ::operations_research::sat::LinearObjective* mutable_objective();
  void set_allocated_objective(::operations_research::sat::LinearObjective* objective);
  private:
  const ::operations_research::sat::LinearObjective& _internal_objective() const;
  ::operations_research::sat::LinearObjective* _internal_mutable_objective();
  public:
  void unsafe_arena_set_allocated_objective(
      ::operations_research::sat::LinearObjective* objective);
  ::operations_research::sat::LinearObjective* unsafe_arena_release_objective();

  // optional .operations_research.sat.BooleanAssignment assignment = 7;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::operations_research::sat::BooleanAssignment& assignment() const;
  ::operations_research::sat::BooleanAssignment* release_assignment();
  ::operations_research::sat::BooleanAssignment* mutable_assignment();
  void set_allocated_assignment(::operations_research::sat::BooleanAssignment* assignment);
  private:
  const ::operations_research::sat::BooleanAssignment& _internal_assignment() const;
  ::operations_research::sat::BooleanAssignment* _internal_mutable_assignment();
  public:
  void unsafe_arena_set_allocated_assignment(
      ::operations_research::sat::BooleanAssignment* assignment);
  ::operations_research::sat::BooleanAssignment* unsafe_arena_release_assignment();

  // optional int32 num_variables = 3;
  bool has_num_variables() const;
  private:
  bool _internal_has_num_variables() const;
  public:
  void clear_num_variables();
  ::PROTOBUF_NAMESPACE_ID::int32 num_variables() const;
  void set_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_variables() const;
  void _internal_set_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 original_num_variables = 8;
  bool has_original_num_variables() const;
  private:
  bool _internal_has_original_num_variables() const;
  public:
  void clear_original_num_variables();
  ::PROTOBUF_NAMESPACE_ID::int32 original_num_variables() const;
  void set_original_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_num_variables() const;
  void _internal_set_original_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearBooleanProblem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint > constraints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::operations_research::sat::LinearObjective* objective_;
  ::operations_research::sat::BooleanAssignment* assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_variables_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_num_variables_;
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinearBooleanConstraint

// repeated int32 literals = 1;
inline int LinearBooleanConstraint::_internal_literals_size() const {
  return literals_.size();
}
inline int LinearBooleanConstraint::literals_size() const {
  return _internal_literals_size();
}
inline void LinearBooleanConstraint::clear_literals() {
  literals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanConstraint::_internal_literals(int index) const {
  return literals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanConstraint::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.literals)
  return _internal_literals(index);
}
inline void LinearBooleanConstraint::set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.literals)
}
inline void LinearBooleanConstraint::_internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Add(value);
}
inline void LinearBooleanConstraint::add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_literals(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanConstraint.literals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LinearBooleanConstraint::_internal_literals() const {
  return literals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LinearBooleanConstraint::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanConstraint.literals)
  return _internal_literals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LinearBooleanConstraint::_internal_mutable_literals() {
  return &literals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LinearBooleanConstraint::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanConstraint.literals)
  return _internal_mutable_literals();
}

// repeated int64 coefficients = 2;
inline int LinearBooleanConstraint::_internal_coefficients_size() const {
  return coefficients_.size();
}
inline int LinearBooleanConstraint::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void LinearBooleanConstraint::clear_coefficients() {
  coefficients_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::_internal_coefficients(int index) const {
  return coefficients_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.coefficients)
  return _internal_coefficients(index);
}
inline void LinearBooleanConstraint::set_coefficients(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.coefficients)
}
inline void LinearBooleanConstraint::_internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value) {
  coefficients_.Add(value);
}
inline void LinearBooleanConstraint::add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanConstraint.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinearBooleanConstraint::_internal_coefficients() const {
  return coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinearBooleanConstraint::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanConstraint.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinearBooleanConstraint::_internal_mutable_coefficients() {
  return &coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinearBooleanConstraint::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanConstraint.coefficients)
  return _internal_mutable_coefficients();
}

// optional int64 lower_bound = 3;
inline bool LinearBooleanConstraint::_internal_has_lower_bound() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearBooleanConstraint::has_lower_bound() const {
  return _internal_has_lower_bound();
}
inline void LinearBooleanConstraint::clear_lower_bound() {
  lower_bound_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::_internal_lower_bound() const {
  return lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.lower_bound)
  return _internal_lower_bound();
}
inline void LinearBooleanConstraint::_internal_set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lower_bound_ = value;
}
inline void LinearBooleanConstraint::set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.lower_bound)
}

// optional int64 upper_bound = 4;
inline bool LinearBooleanConstraint::_internal_has_upper_bound() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinearBooleanConstraint::has_upper_bound() const {
  return _internal_has_upper_bound();
}
inline void LinearBooleanConstraint::clear_upper_bound() {
  upper_bound_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::_internal_upper_bound() const {
  return upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearBooleanConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.upper_bound)
  return _internal_upper_bound();
}
inline void LinearBooleanConstraint::_internal_set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  upper_bound_ = value;
}
inline void LinearBooleanConstraint::set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.upper_bound)
}

// optional string name = 5 [default = ""];
inline bool LinearBooleanConstraint::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearBooleanConstraint::has_name() const {
  return _internal_has_name();
}
inline void LinearBooleanConstraint::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinearBooleanConstraint::name() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.name)
  return _internal_name();
}
inline void LinearBooleanConstraint::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.name)
}
inline std::string* LinearBooleanConstraint::mutable_name() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanConstraint.name)
  return _internal_mutable_name();
}
inline const std::string& LinearBooleanConstraint::_internal_name() const {
  return name_.Get();
}
inline void LinearBooleanConstraint::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinearBooleanConstraint::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:operations_research.sat.LinearBooleanConstraint.name)
}
inline void LinearBooleanConstraint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:operations_research.sat.LinearBooleanConstraint.name)
}
inline void LinearBooleanConstraint::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:operations_research.sat.LinearBooleanConstraint.name)
}
inline std::string* LinearBooleanConstraint::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinearBooleanConstraint::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanConstraint.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinearBooleanConstraint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanConstraint.name)
}
inline std::string* LinearBooleanConstraint::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.LinearBooleanConstraint.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinearBooleanConstraint::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanConstraint.name)
}

// -------------------------------------------------------------------

// LinearObjective

// repeated int32 literals = 1;
inline int LinearObjective::_internal_literals_size() const {
  return literals_.size();
}
inline int LinearObjective::literals_size() const {
  return _internal_literals_size();
}
inline void LinearObjective::clear_literals() {
  literals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearObjective::_internal_literals(int index) const {
  return literals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearObjective::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.literals)
  return _internal_literals(index);
}
inline void LinearObjective::set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.literals)
}
inline void LinearObjective::_internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Add(value);
}
inline void LinearObjective::add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_literals(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearObjective.literals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LinearObjective::_internal_literals() const {
  return literals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LinearObjective::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearObjective.literals)
  return _internal_literals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LinearObjective::_internal_mutable_literals() {
  return &literals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LinearObjective::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearObjective.literals)
  return _internal_mutable_literals();
}

// repeated int64 coefficients = 2;
inline int LinearObjective::_internal_coefficients_size() const {
  return coefficients_.size();
}
inline int LinearObjective::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void LinearObjective::clear_coefficients() {
  coefficients_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearObjective::_internal_coefficients(int index) const {
  return coefficients_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LinearObjective::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.coefficients)
  return _internal_coefficients(index);
}
inline void LinearObjective::set_coefficients(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.coefficients)
}
inline void LinearObjective::_internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value) {
  coefficients_.Add(value);
}
inline void LinearObjective::add_coefficients(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearObjective.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinearObjective::_internal_coefficients() const {
  return coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
LinearObjective::coefficients() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearObjective.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinearObjective::_internal_mutable_coefficients() {
  return &coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
LinearObjective::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearObjective.coefficients)
  return _internal_mutable_coefficients();
}

// optional double offset = 3 [default = 0];
inline bool LinearObjective::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearObjective::has_offset() const {
  return _internal_has_offset();
}
inline void LinearObjective::clear_offset() {
  offset_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LinearObjective::_internal_offset() const {
  return offset_;
}
inline double LinearObjective::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.offset)
  return _internal_offset();
}
inline void LinearObjective::_internal_set_offset(double value) {
  _has_bits_[0] |= 0x00000001u;
  offset_ = value;
}
inline void LinearObjective::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.offset)
}

// optional double scaling_factor = 4 [default = 1];
inline bool LinearObjective::_internal_has_scaling_factor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearObjective::has_scaling_factor() const {
  return _internal_has_scaling_factor();
}
inline void LinearObjective::clear_scaling_factor() {
  scaling_factor_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LinearObjective::_internal_scaling_factor() const {
  return scaling_factor_;
}
inline double LinearObjective::scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.scaling_factor)
  return _internal_scaling_factor();
}
inline void LinearObjective::_internal_set_scaling_factor(double value) {
  _has_bits_[0] |= 0x00000002u;
  scaling_factor_ = value;
}
inline void LinearObjective::set_scaling_factor(double value) {
  _internal_set_scaling_factor(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.scaling_factor)
}

// -------------------------------------------------------------------

// BooleanAssignment

// repeated int32 literals = 1;
inline int BooleanAssignment::_internal_literals_size() const {
  return literals_.size();
}
inline int BooleanAssignment::literals_size() const {
  return _internal_literals_size();
}
inline void BooleanAssignment::clear_literals() {
  literals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BooleanAssignment::_internal_literals(int index) const {
  return literals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BooleanAssignment::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.BooleanAssignment.literals)
  return _internal_literals(index);
}
inline void BooleanAssignment::set_literals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.BooleanAssignment.literals)
}
inline void BooleanAssignment::_internal_add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  literals_.Add(value);
}
inline void BooleanAssignment::add_literals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_literals(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.BooleanAssignment.literals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BooleanAssignment::_internal_literals() const {
  return literals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BooleanAssignment::literals() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.BooleanAssignment.literals)
  return _internal_literals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BooleanAssignment::_internal_mutable_literals() {
  return &literals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BooleanAssignment::mutable_literals() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.BooleanAssignment.literals)
  return _internal_mutable_literals();
}

// -------------------------------------------------------------------

// LinearBooleanProblem

// optional string name = 1 [default = ""];
inline bool LinearBooleanProblem::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearBooleanProblem::has_name() const {
  return _internal_has_name();
}
inline void LinearBooleanProblem::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinearBooleanProblem::name() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.name)
  return _internal_name();
}
inline void LinearBooleanProblem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.name)
}
inline std::string* LinearBooleanProblem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.name)
  return _internal_mutable_name();
}
inline const std::string& LinearBooleanProblem::_internal_name() const {
  return name_.Get();
}
inline void LinearBooleanProblem::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LinearBooleanProblem::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:operations_research.sat.LinearBooleanProblem.name)
}
inline void LinearBooleanProblem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:operations_research.sat.LinearBooleanProblem.name)
}
inline void LinearBooleanProblem::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:operations_research.sat.LinearBooleanProblem.name)
}
inline std::string* LinearBooleanProblem::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LinearBooleanProblem::release_name() {
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LinearBooleanProblem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.name)
}
inline std::string* LinearBooleanProblem::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.LinearBooleanProblem.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LinearBooleanProblem::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanProblem.name)
}

// optional int32 num_variables = 3;
inline bool LinearBooleanProblem::_internal_has_num_variables() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinearBooleanProblem::has_num_variables() const {
  return _internal_has_num_variables();
}
inline void LinearBooleanProblem::clear_num_variables() {
  num_variables_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanProblem::_internal_num_variables() const {
  return num_variables_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanProblem::num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.num_variables)
  return _internal_num_variables();
}
inline void LinearBooleanProblem::_internal_set_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_variables_ = value;
}
inline void LinearBooleanProblem::set_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.num_variables)
}

// repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
inline int LinearBooleanProblem::_internal_constraints_size() const {
  return constraints_.size();
}
inline int LinearBooleanProblem::constraints_size() const {
  return _internal_constraints_size();
}
inline void LinearBooleanProblem::clear_constraints() {
  constraints_.Clear();
}
inline ::operations_research::sat::LinearBooleanConstraint* LinearBooleanProblem::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >*
LinearBooleanProblem::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanProblem.constraints)
  return &constraints_;
}
inline const ::operations_research::sat::LinearBooleanConstraint& LinearBooleanProblem::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::operations_research::sat::LinearBooleanConstraint& LinearBooleanProblem::constraints(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.constraints)
  return _internal_constraints(index);
}
inline ::operations_research::sat::LinearBooleanConstraint* LinearBooleanProblem::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::operations_research::sat::LinearBooleanConstraint* LinearBooleanProblem::add_constraints() {
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.constraints)
  return _internal_add_constraints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >&
LinearBooleanProblem::constraints() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanProblem.constraints)
  return constraints_;
}

// optional .operations_research.sat.LinearObjective objective = 5;
inline bool LinearBooleanProblem::_internal_has_objective() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || objective_ != nullptr);
  return value;
}
inline bool LinearBooleanProblem::has_objective() const {
  return _internal_has_objective();
}
inline void LinearBooleanProblem::clear_objective() {
  if (objective_ != nullptr) objective_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::sat::LinearObjective& LinearBooleanProblem::_internal_objective() const {
  const ::operations_research::sat::LinearObjective* p = objective_;
  return p != nullptr ? *p : *reinterpret_cast<const ::operations_research::sat::LinearObjective*>(
      &::operations_research::sat::_LinearObjective_default_instance_);
}
inline const ::operations_research::sat::LinearObjective& LinearBooleanProblem::objective() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.objective)
  return _internal_objective();
}
inline void LinearBooleanProblem::unsafe_arena_set_allocated_objective(
    ::operations_research::sat::LinearObjective* objective) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objective_);
  }
  objective_ = objective;
  if (objective) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanProblem.objective)
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::release_objective() {
  auto temp = unsafe_arena_release_objective();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::unsafe_arena_release_objective() {
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.objective)
  _has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::LinearObjective* temp = objective_;
  objective_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::_internal_mutable_objective() {
  _has_bits_[0] |= 0x00000002u;
  if (objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearObjective>(GetArena());
    objective_ = p;
  }
  return objective_;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::mutable_objective() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.objective)
  return _internal_mutable_objective();
}
inline void LinearBooleanProblem::set_allocated_objective(::operations_research::sat::LinearObjective* objective) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete objective_;
  }
  if (objective) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(objective);
    if (message_arena != submessage_arena) {
      objective = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objective, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  objective_ = objective;
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.objective)
}

// repeated string var_names = 6;
inline int LinearBooleanProblem::_internal_var_names_size() const {
  return var_names_.size();
}
inline int LinearBooleanProblem::var_names_size() const {
  return _internal_var_names_size();
}
inline void LinearBooleanProblem::clear_var_names() {
  var_names_.Clear();
}
inline std::string* LinearBooleanProblem::add_var_names() {
  // @@protoc_insertion_point(field_add_mutable:operations_research.sat.LinearBooleanProblem.var_names)
  return _internal_add_var_names();
}
inline const std::string& LinearBooleanProblem::_internal_var_names(int index) const {
  return var_names_.Get(index);
}
inline const std::string& LinearBooleanProblem::var_names(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.var_names)
  return _internal_var_names(index);
}
inline std::string* LinearBooleanProblem::mutable_var_names(int index) {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.var_names)
  return var_names_.Mutable(index);
}
inline void LinearBooleanProblem::set_var_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.var_names)
  var_names_.Mutable(index)->assign(value);
}
inline void LinearBooleanProblem::set_var_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.var_names)
  var_names_.Mutable(index)->assign(std::move(value));
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value, size_t size) {
  var_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.sat.LinearBooleanProblem.var_names)
}
inline std::string* LinearBooleanProblem::_internal_add_var_names() {
  return var_names_.Add();
}
inline void LinearBooleanProblem::add_var_names(const std::string& value) {
  var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(std::string&& value) {
  var_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value, size_t size) {
  var_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.sat.LinearBooleanProblem.var_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LinearBooleanProblem::var_names() const {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanProblem.var_names)
  return var_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LinearBooleanProblem::mutable_var_names() {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanProblem.var_names)
  return &var_names_;
}

// optional .operations_research.sat.BooleanAssignment assignment = 7;
inline bool LinearBooleanProblem::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || assignment_ != nullptr);
  return value;
}
inline bool LinearBooleanProblem::has_assignment() const {
  return _internal_has_assignment();
}
inline void LinearBooleanProblem::clear_assignment() {
  if (assignment_ != nullptr) assignment_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::sat::BooleanAssignment& LinearBooleanProblem::_internal_assignment() const {
  const ::operations_research::sat::BooleanAssignment* p = assignment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::operations_research::sat::BooleanAssignment*>(
      &::operations_research::sat::_BooleanAssignment_default_instance_);
}
inline const ::operations_research::sat::BooleanAssignment& LinearBooleanProblem::assignment() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.assignment)
  return _internal_assignment();
}
inline void LinearBooleanProblem::unsafe_arena_set_allocated_assignment(
    ::operations_research::sat::BooleanAssignment* assignment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assignment_);
  }
  assignment_ = assignment;
  if (assignment) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanProblem.assignment)
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::release_assignment() {
  auto temp = unsafe_arena_release_assignment();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::unsafe_arena_release_assignment() {
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.assignment)
  _has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::BooleanAssignment* temp = assignment_;
  assignment_ = nullptr;
  return temp;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::_internal_mutable_assignment() {
  _has_bits_[0] |= 0x00000004u;
  if (assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::BooleanAssignment>(GetArena());
    assignment_ = p;
  }
  return assignment_;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.assignment)
  return _internal_mutable_assignment();
}
inline void LinearBooleanProblem::set_allocated_assignment(::operations_research::sat::BooleanAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assignment);
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.assignment)
}

// optional int32 original_num_variables = 8;
inline bool LinearBooleanProblem::_internal_has_original_num_variables() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LinearBooleanProblem::has_original_num_variables() const {
  return _internal_has_original_num_variables();
}
inline void LinearBooleanProblem::clear_original_num_variables() {
  original_num_variables_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanProblem::_internal_original_num_variables() const {
  return original_num_variables_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearBooleanProblem::original_num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.original_num_variables)
  return _internal_original_num_variables();
}
inline void LinearBooleanProblem::_internal_set_original_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  original_num_variables_ = value;
}
inline void LinearBooleanProblem::set_original_num_variables(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.original_num_variables)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sat
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto
